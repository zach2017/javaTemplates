plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.5'
	id 'io.spring.dependency-management' version '1.1.3'
	//id 'io.spring.dependency-management' version '1.1.3'
	//id 'dev.hilla' version '2.1.9'
	//id 'org.springframework.cloud.contract' version '4.0.4'
	//id 'org.asciidoctor.jvm.convert' version '3.3.2'
}

group = 'com.zalmellc'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('snippetsDir', file("build/generated-snippets"))
//	set('hillaVersion', "2.1.9")
//	set('sentryVersion', "6.28.0")
//	set('springCloudAzureVersion', "5.6.0")
//	set('springCloudGcpVersion', "4.8.3")
//	set('springCloudVersion', "2022.0.4")
//	set('timefoldSolverVersion', "1.3.0")
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	/*
	
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-amqp'
	implementation 'org.springframework.boot:spring-boot-starter-batch'
	implementation 'org.springframework.boot:spring-boot-starter-data-ldap'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis-reactive'
	implementation 'org.springframework.boot:spring-boot-starter-freemarker'
	implementation 'org.springframework.boot:spring-boot-starter-graphql'
	implementation 'org.springframework.boot:spring-boot-starter-mail'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.boot:spring-boot-starter-quartz'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.boot:spring-boot-starter-websocket'
	implementation 'ai.timefold.solver:timefold-solver-spring-boot-starter'
	implementation 'com.azure.spring:spring-cloud-azure-starter'
	implementation 'com.azure.spring:spring-cloud-azure-starter-active-directory'
	implementation 'com.azure.spring:spring-cloud-azure-starter-actuator'
	implementation 'com.azure.spring:spring-cloud-azure-starter-data-cosmos'
	implementation 'com.azure.spring:spring-cloud-azure-starter-jdbc-postgresql'
	implementation 'com.azure.spring:spring-cloud-azure-starter-keyvault'
	implementation 'com.azure.spring:spring-cloud-azure-starter-storage'
	implementation 'com.google.cloud:spring-cloud-gcp-starter'
	implementation 'com.google.cloud:spring-cloud-gcp-starter-pubsub'
	implementation 'com.google.cloud:spring-cloud-gcp-starter-storage'
	implementation 'com.okta.spring:okta-spring-boot-starter:3.0.5'
	implementation 'dev.hilla:hilla-react-spring-boot-starter'
	implementation 'io.sentry:sentry-spring-boot-starter-jakarta'
	implementation 'org.apache.kafka:kafka-streams'
	implementation 'org.flywaydb:flyway-core'
	implementation 'org.flywaydb:flyway-sqlserver'
	implementation 'org.liquibase:liquibase-core'
	implementation 'org.springframework.cloud:spring-cloud-config-server'
	implementation 'org.springframework.cloud:spring-cloud-function-web'
	implementation 'org.springframework.cloud:spring-cloud-starter-circuitbreaker-reactor-resilience4j'
	implementation 'org.springframework.cloud:spring-cloud-starter-config'
	implementation 'org.springframework.cloud:spring-cloud-starter-gateway'
	implementation 'org.springframework.cloud:spring-cloud-starter-loadbalancer'
	implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
	implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-server'
	implementation 'org.springframework.cloud:spring-cloud-starter-task'
	implementation 'org.springframework.cloud:spring-cloud-starter-vault-config'
	implementation 'org.springframework.kafka:spring-kafka'
	implementation 'org.springframework.modulith:spring-modulith-starter-core'
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'com.microsoft.sqlserver:mssql-jdbc'
	runtimeOnly 'com.oracle.database.jdbc:ojdbc8'
	runtimeOnly 'io.micrometer:micrometer-registry-datadog'
	runtimeOnly 'io.micrometer:micrometer-registry-dynatrace'
	runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
	runtimeOnly 'org.postgresql:postgresql'
	runtimeOnly 'org.springframework.modulith:spring-modulith-actuator'
	runtimeOnly 'org.springframework.modulith:spring-modulith-observability'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.boot:spring-boot-testcontainers'
	testImplementation 'io.projectreactor:reactor-test'
	testImplementation 'io.rest-assured:spring-web-test-client'
	testImplementation 'org.springframework.amqp:spring-rabbit-test'
	testImplementation 'org.springframework.batch:spring-batch-test'
	testImplementation 'org.springframework.cloud:spring-cloud-starter-contract-stub-runner'
	testImplementation 'org.springframework.cloud:spring-cloud-starter-contract-verifier'
	testImplementation 'org.springframework.graphql:spring-graphql-test'
	testImplementation 'org.springframework.kafka:spring-kafka-test'
	testImplementation 'org.springframework.modulith:spring-modulith-starter-test'
	testImplementation 'org.springframework.restdocs:spring-restdocs-webtestclient'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'org.testcontainers:gcloud'
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'org.testcontainers:kafka'
	testImplementation 'org.testcontainers:mssqlserver'
	testImplementation 'org.testcontainers:oracle-xe'
	testImplementation 'org.testcontainers:postgresql'
	testImplementation 'org.testcontainers:rabbitmq'
	testImplementation 'org.testcontainers:vault'
	*/
}

dependencyManagement {
	/*imports {
		mavenBom 'org.springframework.modulith:spring-modulith-bom:1.0.2'
		mavenBom "dev.hilla:hilla-bom:${hillaVersion}"
		mavenBom "ai.timefold.solver:timefold-solver-bom:${timefoldSolverVersion}"
		mavenBom "io.sentry:sentry-bom:${sentryVersion}"
		mavenBom "com.azure.spring:spring-cloud-azure-dependencies:${springCloudAzureVersion}"
		mavenBom "com.google.cloud:spring-cloud-gcp-dependencies:${springCloudGcpVersion}"
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	
	}*/
}
/*
tasks.named('contractTest') {
	useJUnitPlatform()
}

tasks.named('test') {
	outputs.dir snippetsDir
	useJUnitPlatform()
}

tasks.named('asciidoctor') {
	inputs.dir snippetsDir
	dependsOn test
}

contracts {
	testMode = 'WebTestClient'
}
*/
